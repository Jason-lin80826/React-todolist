{"version":3,"sources":["redux/todoSlice.js","TodoItem.js","redux/filterSlice.js","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["todoSlice","createSlice","name","initialState","value","reducers","addTodo","state","action","push","payload","completeUpdate","console","log","forEach","item","id","content","newContent","isUpdate","updateTodo","status","isDone","deleteTodo","splice","findIndex","deleteAll","actions","TodoItemWrapper","styled","div","TodoContent","props","TodoButtonWrapper","Button","button","TodoItem","todo","dispatch","useDispatch","useState","setNewContent","onChange","e","target","defaultValue","style","display","onClick","filterSlice","all","done","pending","App","useSelector","filter","input","setInput","useRef","className","placeholder","trim","alert","current","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","filterReducer","todoReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6590cc36.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  value: [],\r\n};\r\n\r\nexport const todoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState,\r\n  reducers: {\r\n    addTodo: (state, action) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value.push(action.payload);\r\n    },\r\n    completeUpdate: (state, action) => {\r\n      console.log(action.payload);\r\n      state.value.forEach((item) => {\r\n        if (item.id === action.payload.id) {\r\n          item.content = action.payload.newContent;\r\n          item.isUpdate = !item.isUpdate;\r\n        }\r\n      });\r\n    },\r\n    updateTodo: (state, action) => {\r\n      state.value.forEach((item) => {\r\n        if (item.id === action.payload) {\r\n          item.isUpdate = !item.isUpdate;\r\n        }\r\n      });\r\n    },\r\n    status: (state, action) => {\r\n      state.value.forEach((item) => {\r\n        if (item.id === action.payload) {\r\n          item.isDone = !item.isDone;\r\n        }\r\n      });\r\n    },\r\n    deleteTodo: (state, action) => {\r\n      state.value.splice(\r\n        state.value.findIndex((item) => item.id === action.payload),\r\n        1\r\n      );\r\n    },\r\n    deleteAll: (state) => {\r\n      state.value = [];\r\n    },\r\n  },\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const {\r\n  addTodo,\r\n  updateTodo,\r\n  deleteTodo,\r\n  status,\r\n  deleteAll,\r\n  completeUpdate,\r\n} = todoSlice.actions;\r\n\r\nexport default todoSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  deleteTodo,\r\n  status,\r\n  updateTodo,\r\n  completeUpdate,\r\n} from './redux/todoSlice';\r\n\r\nconst TodoItemWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 8px 16px;\r\n  border: 1px black solid;\r\n  margin-top: 5px;\r\n`;\r\n\r\nconst TodoContent = styled.div`\r\n  color: rgb(2, 40, 77);\r\n  ${(props) =>\r\n    props.isDone === true &&\r\n    `\r\n    color: red;\r\n    text-decoration:line-through;\r\n  `}\r\n`;\r\nconst TodoButtonWrapper = styled.div``;\r\n\r\nconst Button = styled.button`\r\n  padding: 4px;\r\n  color: black;\r\n\r\n  &:hover {\r\n    color: red;\r\n  }\r\n\r\n  & + & {\r\n    margin-left: 4px;\r\n  }\r\n`;\r\n\r\nexport default function TodoItem({ todo }) {\r\n  const { id, isDone, isUpdate } = todo;\r\n  const dispatch = useDispatch();\r\n  const [newContent, setNewContent] = useState('');\r\n\r\n  const handleClick = () => {\r\n    dispatch(completeUpdate({ id, newContent }));\r\n  };\r\n  return (\r\n    <TodoItemWrapper>\r\n      <input\r\n        onChange={(e) => {\r\n          setNewContent(e.target.value);\r\n        }}\r\n        defaultValue={todo.content}\r\n        style={isUpdate ? { display: 'block' } : { display: 'none' }}\r\n      />\r\n      {isUpdate ? (\r\n        ''\r\n      ) : (\r\n        <TodoContent isDone={isDone}>{todo.content}</TodoContent>\r\n      )}\r\n      <TodoButtonWrapper>\r\n        {isUpdate ? (\r\n          <Button onClick={handleClick}>完成</Button>\r\n        ) : (\r\n          <Button\r\n            onClick={() => {\r\n              dispatch(updateTodo(id));\r\n            }}\r\n          >\r\n            編輯\r\n          </Button>\r\n        )}\r\n        <Button\r\n          onClick={() => {\r\n            dispatch(status(id));\r\n          }}\r\n        >\r\n          {isDone ? '已完成' : '未完成'}\r\n        </Button>\r\n        <Button\r\n          onClick={() => {\r\n            dispatch(deleteTodo(id));\r\n          }}\r\n        >\r\n          刪除\r\n        </Button>\r\n      </TodoButtonWrapper>\r\n    </TodoItemWrapper>\r\n  );\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  value: 'all',\r\n}\r\n\r\nexport const filterSlice = createSlice({\r\n  name: 'filter',\r\n  initialState,\r\n  reducers: {\r\n    all: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value = 'all'\r\n    },\r\n    done: (state) => {\r\n      state.value = 'done'\r\n    },\r\n    pending: (state) => {\r\n      state.value = 'pending'\r\n    },\r\n  },\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { all, done, pending } = filterSlice.actions\r\n\r\nexport default filterSlice.reducer","import React, { useState, useRef } from 'react';\nimport TodoItem from './TodoItem';\nimport styled from 'styled-components';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { all, done, pending } from './redux/filterSlice';\nimport { addTodo, deleteAll } from './redux/todoSlice';\n\nconst Button = styled.button`\n  padding: 4px;\n  color: black;\n\n  & + & {\n    margin-left: 4px;\n  }\n`;\n\nfunction App() {\n  const todo = useSelector((state) => state.todo.value);\n  const filter = useSelector((state) => state.filter.value);\n  const dispatch = useDispatch();\n\n  const [input, setInput] = useState('');\n  const id = useRef(0);\n\n  // const handleAdd = () => {\n  //   if (!inputEl.current.value) {\n  //     return alert('請輸入內容');\n  //   }\n\n  return (\n    <>\n      <div className=\"App\">\n        <input\n          value={input}\n          onChange={(e) => {\n            setInput(e.target.value);\n          }}\n          placeholder=\"請輸入\"\n        />\n        <button\n          onClick={() => {\n            if (!input.trim()) {\n              return alert('請輸入內容');\n            }\n            dispatch(\n              addTodo({\n                id: id.current,\n                content: input,\n                isDone: false,\n                isUpdate: false,\n              })\n            );\n            setInput('');\n            id.current++;\n          }}\n        >\n          新增\n        </button>\n        {todo\n          .filter((todo) => {\n            return filter === 'all'\n              ? todo\n              : filter === 'done'\n              ? todo.isDone\n              : !todo.isDone;\n          })\n          .map((todo) => {\n            return <TodoItem todo={todo} key={todo.id} />;\n          })}\n      </div>\n      <Button\n        onClick={() => {\n          dispatch(deleteAll());\n        }}\n      >\n        清空\n      </Button>\n      <Button\n        onClick={() => {\n          dispatch(all());\n        }}\n      >\n        全部\n      </Button>\n      <Button\n        onClick={() => {\n          dispatch(done());\n        }}\n      >\n        已完成\n      </Button>\n      <Button\n        onClick={() => {\n          dispatch(pending());\n        }}\n      >\n        未完成\n      </Button>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport filterReducer from './filterSlice'\r\nimport todoReducer from './todoSlice'\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    filter: filterReducer,\r\n    todo: todoReducer\r\n  },\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}